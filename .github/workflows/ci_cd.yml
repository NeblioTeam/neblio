name: CICD
on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron:  '15 0 * * *'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_S3_BUCKET: 'neblio-build-staging'
  AWS_S3_ENDPOINT: 'https://ams3.digitaloceanspaces.com'
  GHAT2: ${{ secrets.GHAT2 }}
  CACHE_VER: '1'

jobs:

  linux_daemon_cmake:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v1
    - name: ccache
      uses: actions/cache@v2
      with:
        path: .ccache
        key: ${{ runner.OS }}-${{ env.CACHE_VER }}-22.04-linux_daemon_cmake-${{ github.sha }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.OS }}-${{ env.CACHE_VER }}-22.04-linux_daemon_cmake-
    - name: Set target_v env var
      run: |
        echo "target_v=linux_daemon_cmake" >> $GITHUB_ENV
    - name: Build nebliod for Linux using cmake
      run: |
        python -u ci_scripts/test_linux-daemon-cmake.py
    - name: Upload test artifacts on failure
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: test-artifacts
        path: /tmp/bitcoin*

  linux_daemon:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v1
    - name: ccache
      uses: actions/cache@v2
      with:
        path: .ccache
        key: ${{ runner.OS }}-${{ env.CACHE_VER }}-22.04-linux_daemon-${{ github.sha }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.OS }}-${{ env.CACHE_VER }}-22.04-linux_daemon-
    - name: Set target_v env var
      run: |
        echo "target_v=linux_daemon" >> $GITHUB_ENV
    - name: Build nebliod for Linux
      run: |
        echo "GITHUB_REF=$(echo ${GITHUB_REF})" >> $GITHUB_ENV
        python -u ci_scripts/test_linux-daemon-gui.py
        echo "RELEASE_TAG=$(echo ${GITHUB_REF:10})" >> $GITHUB_ENV
    - name: If Release, Upload Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: AButler/upload-release-assets@v1.0
      with:
        files: ${{ env.SOURCE_PATH }}
        repo-token: ${{ secrets.GHAT2 }}
        release-tag: ${{ env.RELEASE_TAG }}
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: nebliod-linux.tar.gz
        path: ${{ github.workspace }}/deploy/*nebliod*.tar.gz


  linux_wallet:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v1
    - name: ccache
      uses: actions/cache@v2
      with:
        path: .ccache
        key: ${{ runner.OS }}-${{ env.CACHE_VER }}-22.04-linux_wallet-${{ github.sha }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.OS }}-${{ env.CACHE_VER }}-22.04-linux_wallet-
    - name: Set target_v env var
      run: |
        echo "target_v=linux_wallet" >> $GITHUB_ENV
    - name: Build neblio-Qt for Linux
      run: |
        python -u ci_scripts/test_linux-daemon-gui.py
        echo "RELEASE_TAG=$(echo ${GITHUB_REF:10})" >> $GITHUB_ENV
    - name: If Release, Upload Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: AButler/upload-release-assets@v1.0
      with:
        files: ${{ env.SOURCE_PATH }}
        repo-token: ${{ secrets.GHAT2 }}
        release-tag: ${{ env.RELEASE_TAG }}
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: neblio-qt-linux.tar.gz
        path: ${{ github.workspace }}/deploy/*neblio-Qt*.tar.gz


  linux_wallet_test:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v1
    - name: ccache
      uses: actions/cache@v2
      with:
        path: .ccache
        key: ${{ runner.OS }}-${{ env.CACHE_VER }}-22.04-linux_wallet_test-${{ github.sha }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.OS }}-${{ env.CACHE_VER }}-22.04-linux_wallet_test-
          ${{ runner.OS }}-${{ env.CACHE_VER }}-22.04-linux_wallet-
    - name: Set target_v env var
      run: |
        echo "target_v=linux_wallet_test" >> $GITHUB_ENV
    - name: Build neblio-Qt for Linux and Run Tests
      run: |
        python -u ci_scripts/test_linux-daemon-gui.py -t


  windows_x86:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v1
    - name: ccache
      uses: actions/cache@v2
      with:
        path: .ccache
        key: ${{ runner.OS }}-${{ env.CACHE_VER }}-22.04-windows_x86-${{ github.sha }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.OS }}-${{ env.CACHE_VER }}-22.04-windows_x86-
    - name: Build neblio-Qt for Windows x86
      run: |
        python -u ci_scripts/test_win_x86-gui_wallet.py
        echo "RELEASE_TAG=$(echo ${GITHUB_REF:10})" >> $GITHUB_ENV
    - name: If Release, Upload Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: AButler/upload-release-assets@v1.0
      with:
        files: ${{ env.SOURCE_PATH }}
        repo-token: ${{ secrets.GHAT2 }}
        release-tag: ${{ env.RELEASE_TAG }}
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: neblio-qt-windows.zip
        path: ${{ github.workspace }}/deploy/*neblio-Qt*.zip


  osx:
    runs-on: macos-10.15
    steps:
    - uses: actions/checkout@v1
    - name: ccache
      uses: actions/cache@v2
      with:
        path: .ccache
        key: ${{ runner.OS }}-${{ env.CACHE_VER }}-osx-${{ github.sha }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.OS }}-${{ env.CACHE_VER }}-osx-
    - name: Switch Xcode Version
      run: |
        sudo xcode-select -s /Applications/Xcode_11.2.1.app/Contents/Developer
    - name: Build neblio-Qt for macOS
      run: |
        python -u ci_scripts/test_osx-gui_wallet.py
        echo "RELEASE_TAG=$(echo ${GITHUB_REF:10})" >> $GITHUB_ENV
    - name: If Release, Upload Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: AButler/upload-release-assets@v1.0
      with:
        files: ${{ env.SOURCE_PATH }}
        repo-token: ${{ secrets.GHAT2 }}
        release-tag: ${{ env.RELEASE_TAG }}


  osx_test:
    runs-on: macos-10.15
    steps:
    - uses: actions/checkout@v1
    - name: ccache
      uses: actions/cache@v2
      with:
        path: .ccache
        key: ${{ runner.OS }}-${{ env.CACHE_VER }}-osx_test-${{ github.sha }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.OS }}-${{ env.CACHE_VER }}-osx_test-
          ${{ runner.OS }}-${{ env.CACHE_VER }}-osx-
    - name: Switch Xcode Version
      run: |
        sudo xcode-select -s /Applications/Xcode_11.2.1.app/Contents/Developer
    - name: Build neblio-Qt for macOS and Run Tests
      run: |
        python -u ci_scripts/test_osx-gui_wallet.py -t


  docker:
    # Only Build Docker on Daily Scheduled Runs and releases to save time (no cache)
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Docker Files
        uses: actions/checkout@v1
        with:
          repository: NeblioTeam/docker-nebliod
          ref: refs/heads/master
      - name: Move Docker Files
        run: |
          cd ..
          rm -r neblio
          mv docker-nebliod neblio
      - name: Build and Publish to Docker Repository
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: neblioteam/nebliod-build
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          workdir: docker-nebliod-build
          buildargs: GITHUB_SHA


  rpi_docker:
    # Only Build RPi Docker on Daily Scheduled Runs and releases as it takes 5 Hours
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Docker Files
        uses: actions/checkout@v1
        with:
          repository: NeblioTeam/docker-nebliod
          ref: refs/heads/master
      - name: Move Docker Files
        run: |
          cd ..
          rm -r neblio
          mv docker-nebliod neblio
      - name: Build and Publish to Docker Repository
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: neblioteam/nebliod-build-rpi
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          workdir: docker-nebliod-build-rpi
          buildargs: GITHUB_SHA


  rpi_wallet:
    # Only Build RPi on Daily Scheduled Runs and releases as it takes a long time
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v1
    - name: ccache
      uses: actions/cache@v2
      with:
        path: .ccache
        key: ${{ runner.OS }}-${{ env.CACHE_VER }}-22.04-rpi_wallet-${{ github.sha }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.OS }}-${{ env.CACHE_VER }}-22.04-rpi_wallet-
    - name: Set target_v env var
      run: |
        echo "target_v=rpi_wallet" >> $GITHUB_ENV
    - name: Build neblio-Qt for Raspberry Pi
      run: |
        python -u ci_scripts/test_rpi-daemon-gui.py
        echo "RELEASE_TAG=$(echo ${GITHUB_REF:10})" >> $GITHUB_ENV
    - name: If Release, Upload Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: AButler/upload-release-assets@v1.0
      with:
        files: ${{ env.SOURCE_PATH }}
        repo-token: ${{ secrets.GHAT2 }}
        release-tag: ${{ env.RELEASE_TAG }}


  rpi_wallet_test:
    # Only Build RPi on Daily Scheduled Runs and releases as it takes a long time
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v1
    - name: ccache
      uses: actions/cache@v2
      with:
        path: .ccache
        key: ${{ runner.OS }}-${{ env.CACHE_VER }}-22.04-rpi_wallet_test-${{ github.sha }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.OS }}-${{ env.CACHE_VER }}-22.04-rpi_wallet_test-
          ${{ runner.OS }}-${{ env.CACHE_VER }}-22.04-rpi_wallet-
    - name: Set target_v env var
      run: |
        echo "target_v=rpi_wallet_test" >> $GITHUB_ENV
    - name: Build neblio-Qt for Raspberry Pi and Run Tests
      run: |
        python -u ci_scripts/test_rpi-daemon-gui.py -t
    - name: Upload test artifacts on failure
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: test-artifacts
        path: /home/runner/work/neblio/neblio/deploy/debug.log


  rpi_daemon:
    # Only Build RPi on Daily Scheduled Runs and releases as it takes a long time
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v1
    - name: ccache
      uses: actions/cache@v2
      with:
        path: .ccache
        key: ${{ runner.OS }}-${{ env.CACHE_VER }}-22.04-rpi_daemon-${{ github.sha }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.OS }}-${{ env.CACHE_VER }}-22.04-rpi_daemon-
    - name: Set target_v env var
      run: |
        echo "target_v=rpi_daemon" >> $GITHUB_ENV
    - name: Build nebliod for Raspberry Pi
      run: |
        python -u ci_scripts/test_rpi-daemon-gui.py
        echo "RELEASE_TAG=$(echo ${GITHUB_REF:10})" >> $GITHUB_ENV
    - name: If Release, Upload Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: AButler/upload-release-assets@v1.0
      with:
        files: ${{ env.SOURCE_PATH }}
        repo-token: ${{ secrets.GHAT2 }}
        release-tag: ${{ env.RELEASE_TAG }}


