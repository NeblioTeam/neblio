// Copyright (c) 2012-2013 The PPCoin developers
// Distributed under the MIT/X11 software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include "kernel.h"
#include "block.h"
#include "chainparams.h"
#include "main.h"
#include "txdb.h"

using namespace std;

// Get time weight
int64_t GetWeight(const ITxDB& txdb, int64_t nIntervalBeginning, int64_t nIntervalEnd)
{
    // Kernel hash weight starts from 0 at the min age
    // this change increases active coins participating the hash and helps
    // to secure the network when proof-of-stake difficulty is low
    const unsigned int nSMA = Params().StakeMinAge(txdb);
    return min(nIntervalEnd - nIntervalBeginning - nSMA, Params().StakeMaxAge());
}

// Get the last stake modifier and its generation time from a given block
static bool GetLastStakeModifier(const ITxDB& txdb, const CBlockIndex* pindex, uint64_t& nStakeModifier,
                                 int64_t& nModifierTime)
{
    if (!pindex)
        return NLog.error("GetLastStakeModifier: null pindex");
    CBlockIndex index = *pindex;
    while (index.hashPrev != 0 && !index.GeneratedStakeModifier()) {
        boost::optional<CBlockIndex> bi = index.getPrev(txdb);
        if (bi) {
            index = std::move(*bi);
        } else {
            NLog.write(b_sev::err,
                       "CRITICAL ERROR: failed to get prev block if {} even though it's not genesis",
                       index.hashPrev.ToString());
            break;
        }
    }
    if (!index.GeneratedStakeModifier())
        return NLog.error("GetLastStakeModifier: no generation at genesis block");
    nStakeModifier = index.nStakeModifier;
    nModifierTime  = index.GetBlockTime();
    return true;
}

// Get selection interval section (in seconds)
static int64_t GetStakeModifierSelectionIntervalSection(int nSection)
{
    assert(nSection >= 0 && nSection < 64);
    return (Params().StakeModifierInterval() * 63 /
            (63 + ((63 - nSection) * (MODIFIER_INTERVAL_RATIO - 1))));
}

// Get stake modifier selection interval (in seconds)
static int64_t GetStakeModifierSelectionInterval()
{
    int64_t nSelectionInterval = 0;
    for (int nSection = 0; nSection < 64; nSection++)
        nSelectionInterval += GetStakeModifierSelectionIntervalSection(nSection);

    return nSelectionInterval;
}

// select a block from the candidate blocks in vSortedByTimestamp, excluding
// already selected blocks in vSelectedBlocks, and with timestamp up to
// nSelectionIntervalStop.
static bool
SelectBlockFromCandidates(const ITxDB& txdb, const vector<pair<int64_t, uint256>>& vSortedByTimestamp,
                          const map<uint256, boost::optional<CBlockIndex>>& mapSelectedBlocks,
                          int64_t nSelectionIntervalStop, uint64_t nStakeModifierPrev,
                          boost::optional<CBlockIndex>& pindexSelected)
{
    bool    fSelected = false;
    uint256 hashBest  = 0;
    pindexSelected    = boost::none;
    for (const PAIRTYPE(int64_t, uint256) & item : vSortedByTimestamp) {
        const auto bi = txdb.ReadBlockIndex(item.second);
        if (!bi) {
            return NLog.error(
                "SelectBlockFromCandidates: failed to find block index for candidate block {}",
                item.second.ToString());
        }
        CBlockIndex index = std::move(*bi);
        if (fSelected && index.GetBlockTime() > nSelectionIntervalStop)
            break;
        if (mapSelectedBlocks.count(index.GetBlockHash()) > 0)
            continue;
        // compute the selection hash by hashing its proof-hash and the
        // previous proof-of-stake modifier
        CDataStream ss(SER_GETHASH, 0);
        ss << index.hashProof << nStakeModifierPrev;
        uint256 hashSelection = Hash(ss.begin(), ss.end());
        // the selection hash is divided by 2**32 so that proof-of-stake block
        // is always favored over proof-of-work block. this is to preserve
        // the energy efficiency property
        if (index.IsProofOfStake())
            hashSelection >>= 32;
        if (fSelected && hashSelection < hashBest) {
            hashBest       = hashSelection;
            pindexSelected = index;
        } else if (!fSelected) {
            fSelected      = true;
            hashBest       = hashSelection;
            pindexSelected = index;
        }
    }
    if (fDebug && GetBoolArg("-printstakemodifier"))
        NLog.write(b_sev::info, "SelectBlockFromCandidates: selection hash={}", hashBest.ToString());
    return fSelected;
}

// Stake Modifier (hash modifier of proof-of-stake):
// The purpose of stake modifier is to prevent a txout (coin) owner from
// computing future proof-of-stake generated by this txout at the time
// of transaction confirmation. To meet kernel protocol, the txout
// must hash with a future stake modifier to generate the proof.
// Stake modifier consists of bits each of which is contributed from a
// selected block of a given block group in the past.
// The selection of a block is based on a hash of the block's proof-hash and
// the previous stake modifier.
// Stake modifier is recomputed at a fixed time interval instead of every
// block. This is to make it difficult for an attacker to gain control of
// additional bits in the stake modifier, even after generating a chain of
// blocks.
bool ComputeNextStakeModifier(const ITxDB& txdb, const CBlockIndex* const pindexPrev,
                              uint64_t& nStakeModifier, bool& fGeneratedStakeModifier)
{
    nStakeModifier          = 0;
    fGeneratedStakeModifier = false;
    if (!pindexPrev) {
        fGeneratedStakeModifier = true;
        return true; // genesis block's modifier is 0
    }
    // First find current stake modifier and its generation block time
    // if it's not old enough, return the same stake modifier
    int64_t nModifierTime = 0;
    if (!GetLastStakeModifier(txdb, pindexPrev, nStakeModifier, nModifierTime))
        return NLog.error("ComputeNextStakeModifier: unable to get last modifier");
    if (fDebug) {
        NLog.write(b_sev::debug, "ComputeNextStakeModifier: prev modifier=0x{:016x} time={}",
                   nStakeModifier, DateTimeStrFormat(nModifierTime));
    }
    if (nModifierTime / Params().StakeModifierInterval() >=
        pindexPrev->GetBlockTime() / Params().StakeModifierInterval())
        return true;

    // Sort candidate blocks by timestamp
    vector<pair<int64_t, uint256>> vSortedByTimestamp;
    unsigned int                   nTS = Params().TargetSpacing(txdb);
    vSortedByTimestamp.reserve(64 * Params().StakeModifierInterval() / nTS);
    int64_t nSelectionInterval      = GetStakeModifierSelectionInterval();
    int64_t nSelectionIntervalStart = (pindexPrev->GetBlockTime() / Params().StakeModifierInterval()) *
                                          Params().StakeModifierInterval() -
                                      nSelectionInterval;
    boost::optional<CBlockIndex> index = *pindexPrev;
    while (index && index->GetBlockTime() >= nSelectionIntervalStart) {
        vSortedByTimestamp.push_back(make_pair(index->GetBlockTime(), index->GetBlockHash()));
        if (index->hashPrev != 0) {
            index = index->getPrev(txdb);
        } else {
            index = boost::none;
        }
    }
    int nHeightFirstCandidate = index ? (index->nHeight + 1) : 0;
    reverse(vSortedByTimestamp.begin(), vSortedByTimestamp.end());
    sort(vSortedByTimestamp.begin(), vSortedByTimestamp.end());

    // Select 64 blocks from candidate blocks to generate stake modifier
    uint64_t                                   nStakeModifierNew      = 0;
    int64_t                                    nSelectionIntervalStop = nSelectionIntervalStart;
    map<uint256, boost::optional<CBlockIndex>> mapSelectedBlocks;
    for (int nRound = 0; nRound < min(64, (int)vSortedByTimestamp.size()); nRound++) {
        // add an interval section to the current selection round
        nSelectionIntervalStop += GetStakeModifierSelectionIntervalSection(nRound);
        // select a block from the candidates of current round
        if (!SelectBlockFromCandidates(txdb, vSortedByTimestamp, mapSelectedBlocks,
                                       nSelectionIntervalStop, nStakeModifier, index)) {
            return NLog.error("ComputeNextStakeModifier: unable to select block at round {}", nRound);
        }
        // write the entropy bit of the selected block
        nStakeModifierNew |= (((uint64_t)index->GetStakeEntropyBit()) << nRound);
        // add the selected block from candidates to selected list
        mapSelectedBlocks.insert(make_pair(index->GetBlockHash(), index));
        if (fDebug && GetBoolArg("-printstakemodifier"))
            NLog.write(b_sev::info,
                       "ComputeNextStakeModifier: selected round {} stop={} height={} bit={}", nRound,
                       DateTimeStrFormat(nSelectionIntervalStop), index->nHeight,
                       index->GetStakeEntropyBit());
    }

    // Print selection map for visualization of the selected blocks
    if (fDebug) {
        string strSelectionMap = "";
        // '-' indicates proof-of-work blocks not selected
        strSelectionMap.insert(0, pindexPrev->nHeight - nHeightFirstCandidate + 1, '-');
        index = *pindexPrev;
        while (index && index->nHeight >= nHeightFirstCandidate) {
            // '=' indicates proof-of-stake blocks not selected
            if (index->IsProofOfStake())
                strSelectionMap.replace(index->nHeight - nHeightFirstCandidate, 1, "=");
            if (index->hashPrev != 0) {
                index = index->getPrev(txdb);
            } else {
                index = boost::none;
            }
        }
        for (const auto& item : mapSelectedBlocks) {
            // 'S' indicates selected proof-of-stake blocks
            // 'W' indicates selected proof-of-work blocks
            strSelectionMap.replace(item.second->nHeight - nHeightFirstCandidate, 1,
                                    item.second->IsProofOfStake() ? "S" : "W");
        }
        NLog.write(b_sev::info, "ComputeNextStakeModifier: selection height [{}, {}] map {}",
                   nHeightFirstCandidate, pindexPrev->nHeight, strSelectionMap);
    }
    if (fDebug) {
        NLog.write(b_sev::debug, "ComputeNextStakeModifier: new modifier=0x{:016x} time={}",
                   nStakeModifierNew, DateTimeStrFormat(pindexPrev->GetBlockTime()));
    }

    nStakeModifier          = nStakeModifierNew;
    fGeneratedStakeModifier = true;
    return true;
}

// The stake modifier used to hash for a stake kernel is chosen as the stake
// modifier about a selection interval later than the coin generating the kernel
static bool GetKernelStakeModifier(const ITxDB& txdb, uint256 hashBlockFrom, uint64_t& nStakeModifier,
                                   int& nStakeModifierHeight, int64_t& nStakeModifierTime,
                                   bool fPrintProofOfStake)
{
    nStakeModifier = 0;
    const auto bi  = txdb.ReadBlockIndex(hashBlockFrom);
    if (!bi)
        return NLog.error("GetKernelStakeModifier() : block not indexed");
    const CBlockIndex pindexFrom                                 = bi.get();
    nStakeModifierHeight                                         = pindexFrom.nHeight;
    nStakeModifierTime                                           = pindexFrom.GetBlockTime();
    static const int64_t         nStakeModifierSelectionInterval = GetStakeModifierSelectionInterval();
    unsigned int                 nSMA                            = Params().StakeMinAge(txdb);
    boost::optional<CBlockIndex> pindex                          = pindexFrom;
    // loop to find the stake modifier later by a selection interval
    while (nStakeModifierTime < pindexFrom.GetBlockTime() + nStakeModifierSelectionInterval) {
        if (pindex->hashNext == 0) { // reached best block; may happen if node is behind on block chain
            if (fPrintProofOfStake ||
                (pindex->GetBlockTime() + nSMA - nStakeModifierSelectionInterval > GetAdjustedTime())) {
                return NLog.error(
                    "GetKernelStakeModifier() : reached best block {} at height {} from block {}",
                    pindex->GetBlockHash().ToString(), pindex->nHeight, hashBlockFrom.ToString());
            } else {
                return false;
            }
        }
        pindex = pindex->getNext(txdb);
        if (!pindex) {
            return NLog.error(
                "GetKernelStakeModifier() : Even though the block has a non-zero hashNext, that next "
                "block was not found! This happened with block {} at height {} from block {}",
                pindex->GetBlockHash().ToString(), pindex->nHeight, hashBlockFrom.ToString());
        }
        if (pindex->GeneratedStakeModifier()) {
            nStakeModifierHeight = pindex->nHeight;
            nStakeModifierTime   = pindex->GetBlockTime();
        }
    }
    nStakeModifier = pindex->nStakeModifier;
    return true;
}

// ppcoin kernel protocol
// coinstake must meet hash target according to the protocol:
// kernel (input 0) must meet the formula
//     hash(nStakeModifier + txPrev.block.nTime + txPrev.offset + txPrev.nTime + txPrev.vout.n + nTime) <
//     bnTarget * nCoinDayWeight
// this ensures that the chance of getting a coinstake is proportional to the
// amount of coin age one owns.
// The reason this hash is chosen is the following:
//   nStakeModifier: scrambles computation to make it very difficult to precompute
//                  future proof-of-stake at the time of the coin's confirmation
//   txPrev.block.nTime: prevent nodes from guessing a good timestamp to
//                       generate transaction for future advantage
//   txPrev.offset: offset of txPrev inside block, to reduce the chance of
//                  nodes generating coinstake at the same time
//   txPrev.nTime: reduce the chance of nodes generating coinstake at the same
//                 time
//   txPrev.vout.n: output number of txPrev, to reduce the chance of nodes
//                  generating coinstake at the same time
//   block/tx hash should not be used here as they can be generated in vast
//   quantities so as to generate blocks faster, degrading the system back into
//   a proof-of-work situation.
//
bool CheckStakeKernelHash(const ITxDB& txdb, unsigned int nBits, const CBlock& blockFrom,
                          unsigned int nTxPrevOffset, const CTransaction& txPrev,
                          const COutPoint& prevout, unsigned int nTimeTx, uint256& hashProofOfStake,
                          uint256& targetProofOfStake, bool fPrintProofOfStake)
{
    if (nTimeTx < txPrev.nTime) // Transaction timestamp violation
        return NLog.error("CheckStakeKernelHash() : nTime violation");

    unsigned int nTimeBlockFrom = blockFrom.GetBlockTime();
    unsigned int nSMA           = Params().StakeMinAge(txdb);
    if (nTimeBlockFrom + nSMA > nTimeTx) // Min age requirement
        return NLog.error("CheckStakeKernelHash() : min age violation");

    CBigNum bnTargetPerCoinDay;
    bnTargetPerCoinDay.SetCompact(nBits);
    int64_t nValueIn = txPrev.vout[prevout.n].nValue;

    uint256 hashBlockFrom = blockFrom.GetHash();

    CBigNum bnCoinDayWeight = CBigNum(nValueIn) *
                              GetWeight(txdb, (int64_t)txPrev.nTime, (int64_t)nTimeTx) / COIN /
                              (24 * 60 * 60);

    targetProofOfStake = (bnCoinDayWeight * bnTargetPerCoinDay).getuint256();

    // Calculate hash
    CDataStream ss(SER_GETHASH, 0);
    uint64_t    nStakeModifier       = 0;
    int         nStakeModifierHeight = 0;
    int64_t     nStakeModifierTime   = 0;

    if (!GetKernelStakeModifier(txdb, hashBlockFrom, nStakeModifier, nStakeModifierHeight,
                                nStakeModifierTime, fPrintProofOfStake))
        return false;
    ss << nStakeModifier;

    ss << nTimeBlockFrom << nTxPrevOffset << txPrev.nTime << prevout.n << nTimeTx;
    hashProofOfStake = Hash(ss.begin(), ss.end());
    if (fDebug && fPrintProofOfStake) {
        const auto bi = txdb.ReadBlockIndex(hashBlockFrom);
        NLog.write(b_sev::info,
                   "CheckStakeKernelHash() : using modifier 0x{:016x}"
                   " at height={} timestamp={} for block from height={} timestamp={}",
                   nStakeModifier, nStakeModifierHeight, DateTimeStrFormat(nStakeModifierTime),
                   bi ? bi->nHeight : -1, DateTimeStrFormat(blockFrom.GetBlockTime()));
        NLog.write(
            b_sev::info,
            "CheckStakeKernelHash() : check modifier=0x{:016x}"
            " nTimeBlockFrom={} nTxPrevOffset={} nTimeTxPrev={} nPrevout={} nTimeTx={} hashProof={}",
            nStakeModifier, nTimeBlockFrom, nTxPrevOffset, txPrev.nTime, prevout.n, nTimeTx,
            hashProofOfStake.ToString());
    }

    // Now check if proof-of-stake hash meets target protocol
    if (CBigNum(hashProofOfStake) > bnCoinDayWeight * bnTargetPerCoinDay) {
        return false;
    }

    if (fDebug && !fPrintProofOfStake) {
        const auto bi = txdb.ReadBlockIndex(hashBlockFrom);
        NLog.write(b_sev::info,
                   "CheckStakeKernelHash() : using modifier 0x{:016x}"
                   " at height={} timestamp={} for block from height={} timestamp={}",
                   nStakeModifier, nStakeModifierHeight, DateTimeStrFormat(nStakeModifierTime),
                   bi ? bi->nHeight : -1, DateTimeStrFormat(blockFrom.GetBlockTime()));
        NLog.write(
            b_sev::info,
            "CheckStakeKernelHash() : pass modifier=0x{:016x}"
            " nTimeBlockFrom={} nTxPrevOffset={} nTimeTxPrev={} nPrevout={} nTimeTx={} hashProof={}",
            nStakeModifier, nTimeBlockFrom, nTxPrevOffset, txPrev.nTime, prevout.n, nTimeTx,
            hashProofOfStake.ToString());
    }
    return true;
}

// Check kernel hash target and coinstake signature
bool CheckProofOfStake(const ITxDB& txdb, const CTransaction& tx, unsigned int nBits,
                       uint256& hashProofOfStake, uint256& targetProofOfStake)
{
    if (!tx.IsCoinStake())
        return NLog.error("CheckProofOfStake() : called on non-coinstake {}", tx.GetHash().ToString());

    // Kernel (input 0) must match the stake hash target per coin age (nBits)
    const CTxIn& txin = tx.vin[0];

    // First try finding the previous transaction in database
    CTransaction txPrev;
    CTxIndex     txindex;
    if (!txPrev.ReadFromDisk(txdb, txin.prevout, txindex))
        return tx.DoS(1, NLog.error("CheckProofOfStake() : INFO: read txPrev failed {}:{}",
                                    txin.prevout.hash.ToString(), txin.prevout.n)); // previous
                                                                                    // transaction not
                                                                                    // in main chain,
                                                                                    // may occur during
                                                                                    // initial download

    // Verify signature
    if (VerifySignature(txPrev, tx, 0, false, false, 0).isErr())
        return tx.DoS(100, NLog.error("CheckProofOfStake() : VerifySignature failed on coinstake {}",
                                      tx.GetHash().ToString()));

    // Read block header
    CBlock block;
    if (!block.ReadFromDisk(txindex.pos.nBlockPos, txdb, false))
        return fDebug ? NLog.error("CheckProofOfStake() : read block failed")
                      : false; // unable to read block of previous transaction

    if (!CheckStakeKernelHash(txdb, nBits, block, txindex.pos.nTxPos, txPrev, txin.prevout, tx.nTime,
                              hashProofOfStake, targetProofOfStake, fDebug))
        return tx.DoS(
            1,
            NLog.error("CheckProofOfStake() : INFO: check kernel failed on coinstake {}, hashProof={}",
                       tx.GetHash().ToString(),
                       hashProofOfStake.ToString())); // may occur during initial download or
                                                      // if behind on block chain sync

    return true;
}

// Check whether the coinstake timestamp meets protocol
bool CheckCoinStakeTimestamp(int64_t nTimeBlock, int64_t nTimeTx)
{
    // v0.3 protocol
    return (nTimeBlock == nTimeTx);
}

// Get stake modifier checksum
unsigned int GetStakeModifierChecksum(const CBlockIndex* pindex, const ITxDB& txdb)
{
    assert(pindex->hashPrev != 0 || pindex->GetBlockHash() == Params().GenesisBlockHash());
    // Hash previous checksum with flags, hashProofOfStake and nStakeModifier
    CDataStream ss(SER_GETHASH, 0);
    if (auto prev = pindex->getPrev(txdb))
        ss << prev->nStakeModifierChecksum;
    ss << pindex->nFlags << (pindex->IsProofOfStake() ? pindex->hashProof : 0) << pindex->nStakeModifier;
    uint256 hashChecksum = Hash(ss.begin(), ss.end());
    hashChecksum >>= (256 - 32);
    return hashChecksum.Get64();
}

// Check stake modifier hard checkpoints
bool CheckStakeModifierCheckpoints(int nHeight, unsigned int nStakeModifierChecksum)
{
    const MapStakeModifierCheckpoints& checkpoints = Params().StakeModifierCheckpoints();

    auto it = checkpoints.find(nHeight);
    if (it != checkpoints.cend())
        return nStakeModifierChecksum == it->second;

    return true;
}
