# Copyright (c) 2009-2010 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

USE_UPNP:=1

MKDIR_P = mkdir -p

LINK:=$(CXX)
ARCH:=$(system lscpu | head -n 1 | awk '{print $2}')

CXXARCH:=$(${CXX} -dumpmachine | grep -i 'x86_64')

DEFS=-DBOOST_SPIRIT_THREADSAFE -DUSE_LMDB

# detect arch for lmdb32
ifneq ($(CXXARCH),)
MDB32D:=-DMDB_VL32
endif

# force 32-bit lmdb at will
ifdef lmdb32
MDB32D:=-DMDB_VL32
endif

# force 64-bit lmdb at will
ifdef lmdb64
MDB32D:=
endif



DEFS += $(addprefix -I,$(CURDIR) $(CURDIR)/obj $(BOOST_INCLUDE_PATH) $(BDB_INCLUDE_PATH) $(OPENSSL_INCLUDE_PATH) $(shell pkg-config libcurl --cflags)) ${MDB32D}
LIBS = $(addprefix -L,$(BOOST_LIB_PATH) $(BDB_LIB_PATH) $(OPENSSL_LIB_PATH))

TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)

LMODE = dynamic
LMODE2 = dynamic
ifdef STATIC
	LMODE = static
	ifeq (${STATIC}, all)
		LMODE2 = static
	endif
	LIBS += $(shell pkg-config libcurl --libs --static)
else
    TESTDEFS += -DBOOST_TEST_DYN_LINK
	LIBS += $(shell pkg-config libcurl --libs)
endif

ifdef NEBLIO_REST
    DEFS += -DNEBLIO_REST=$(NEBLIO_REST)
    # restbed
    LIBS += -L"$(CURDIR)/restbed/distribution/library"
    DEFS += -I"$(CURDIR)/restbed/distribution/include/"
    CXX += -std=c++11

    all:
	@echo "Building restbed ..." && mkdir -p restbed/build && cd restbed/build && cmake .. && make install && cd ../..
endif

DEFS += -I"$(CURDIR)/json/"

# for boost 1.37, add -mt to the boost libraries
LIBS += \
 -Wl,-B$(LMODE) \
   -l boost_system$(BOOST_LIB_SUFFIX) \
   -l boost_filesystem$(BOOST_LIB_SUFFIX) \
   -l boost_program_options$(BOOST_LIB_SUFFIX) \
   -l boost_thread$(BOOST_LIB_SUFFIX) \
   -l db_cxx$(BDB_LIB_SUFFIX) \
   -l ssl \
   -l crypto 
ifdef NEBLIO_REST
   LIBS += -l restbed
endif

ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
	LIBS += -l miniupnpc
	DEFS += -DUSE_UPNP=$(USE_UPNP)
endif

LIBS+= \
 -Wl,-B$(LMODE2) \
   -l z \
   -l dl \
   -l pthread

# Hardening
# Make some classes of vulnerabilities unexploitable in case one is discovered.
#
    # This is a workaround for Ubuntu bug #691722, the default -fstack-protector causes
    # -fstack-protector-all to be ignored unless -fno-stack-protector is used first.
    # see: https://bugs.launchpad.net/ubuntu/+source/gcc-4.5/+bug/691722
    HARDENING=-fno-stack-protector

    # Stack Canaries
    # Put numbers at the beginning of each stack frame and check that they are the same.
    # If a stack buffer if overflowed, it writes over the canary number and then on return
    # when that number is checked, it won't be the same and the program will exit with
    # a "Stack smashing detected" error instead of being exploited.
    HARDENING+=-fstack-protector-all -Wstack-protector

    # Make some important things such as the global offset table read only as soon as
    # the dynamic linker is finished building it. This will prevent overwriting of addresses
    # which would later be jumped to.
    LDHARDENING+=-Wl,-z,relro -Wl,-z,now

    # Build position independent code to take advantage of Address Space Layout Randomization
    # offered by some kernels.
    # see doc/build-unix.txt for more information.
    #ifdef PIE
        ifndef STATIC
            HARDENING+=-fPIE
            LDHARDENING+=-pie
        endif
    #endif

    # -D_FORTIFY_SOURCE=2 does some checking for potentially exploitable code patterns in
    # the source such overflowing a statically defined buffer.
    HARDENING+=-D_FORTIFY_SOURCE=2
#


DEBUGFLAGS=-g


ifeq (${ARCH}, i686)
    EXT_OPTIONS=-msse2
endif


# CXXFLAGS can be specified on the make command line, so we use xCXXFLAGS that only
# adds some defaults in front. Unfortunately, CXXFLAGS=... $(CXXFLAGS) does not work.
xCXXFLAGS=-O2 $(EXT_OPTIONS) -std=c++11 -pthread -Wall -Wextra -Wno-ignored-qualifiers -Wformat -Wformat-security -Wno-unused-parameter \
    $(DEBUGFLAGS) $(DEFS) $(HARDENING) $(CXXFLAGS)

# LDFLAGS can be specified on the make command line, so we use xLDFLAGS that only
# adds some defaults in front. Unfortunately, LDFLAGS=... $(LDFLAGS) does not work.
xLDFLAGS=$(LDHARDENING) $(LDFLAGS)

OBJS= \
    liblmdb/liblmdb.a \
    obj/alert.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/crypter.o \
    obj/key.o \
    obj/db.o \
    obj/init.o \
    obj/keystore.o \
    obj/miner.o \
    obj/main.o \
    obj/net.o \
    obj/protocol.o \
    obj/bitcoinrpc.o \
    obj/rpcdump.o \
    obj/rpcnet.o \
    obj/rpcmining.o \
    obj/rpcwallet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/script.o \
    obj/sync.o \
    obj/util.o \
    obj/wallet.o \
    obj/walletdb.o \
    obj/hash.o \
    obj/bloom.o \
    obj/noui.o \
    obj/kernel.o \
    obj/pbkdf2.o \
    obj/scrypt.o \
    obj/scrypt-arm.o \
    obj/scrypt-x86.o \
    obj/scrypt-x86_64.o \
    obj/zerocoin/Accumulator.o \
    obj/zerocoin/AccumulatorProofOfKnowledge.o \
    obj/zerocoin/Coin.o \
    obj/zerocoin/CoinSpend.o \
    obj/zerocoin/Commitment.o \
    obj/zerocoin/ParamGeneration.o \
    obj/zerocoin/Params.o \
    obj/zerocoin/SerialNumberSignatureOfKnowledge.o \
    obj/zerocoin/SpendMetaData.o \
    obj/zerocoin/ZeroTest.o \
    obj/curltools.o                           \
    obj/json/json_spirit_reader.o             \
    obj/json/json_spirit_value.o              \
    obj/json/json_spirit_writer.o             \
    obj/ntp1/ntp1apicalls.o                   \
    obj/ntp1/ntp1inpoint.o                    \
    obj/ntp1/ntp1outpoint.o                   \
    obj/ntp1/ntp1script_burn.o                \
    obj/ntp1/ntp1script.o                     \
    obj/ntp1/ntp1script_issuance.o            \
    obj/ntp1/ntp1script_transfer.o            \
    obj/ntp1/ntp1sendtokensdata.o             \
    obj/ntp1/ntp1sendtokensonerecipientdata.o \
    obj/ntp1/ntp1tokenmetadata.o              \
    obj/ntp1/ntp1tokenminimalmetadata.o       \
    obj/ntp1/ntp1tokentxdata.o                \
    obj/ntp1/ntp1tools.o                      \
    obj/ntp1/ntp1transaction.o                \
    obj/ntp1/ntp1txin.o                       \
    obj/ntp1/ntp1txout.o                      \
    obj/ntp1/ntp1sendtxdata.o                 \
    obj/ntp1/ntp1wallet.o                     

ifdef NEBLIO_REST
    OBJS += obj/nebliorest.o 
endif

all: nebliod

LIBS += $(CURDIR)/liblmdb/liblmdb.a
DEFS += $(addprefix -I,$(CURDIR)/liblmdb)
OBJS += obj/txdb-lmdb.o
liblmdb/liblmdb.a:
	@echo "Building LMDB ..." && cd liblmdb && $(MAKE) clean && $(MAKE) CC=$(CC) CXX="$(CXX)" OPT="$(xCXXFLAGS)" liblmdb.a && cd ..
obj/txdb-lmdb.o: liblmdb/liblmdb.a

# auto-generated dependencies:
-include obj/*.P
-include obj-test/*.P

obj/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj/build.h
version.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO

obj/scrypt-x86.o: scrypt-x86.S
	${MKDIR_P} obj
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-x86_64.o: scrypt-x86_64.S
	${MKDIR_P} obj
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-arm.o: scrypt-arm.S
	${MKDIR_P} obj
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/%.o: %.cpp
	${MKDIR_P} obj obj/json
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/ntp1/%.o: ntp1/%.cpp
	${MKDIR_P} obj/ntp1 obj/json
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/zerocoin/%.o: zerocoin/%.cpp
	${MKDIR_P} obj/zerocoin obj/json
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

nebliod: $(OBJS:obj/%=obj/%)
	${MKDIR_P} obj obj/json
	$(LINK) $(xCXXFLAGS) -o $@ $^ $(xLDFLAGS) $(LIBS)

TESTOBJS := $(patsubst test/%.cpp,obj-test/%.o,$(wildcard test/*.cpp))

obj-test/%.o: test/%.cpp
	$(CXX) -c $(TESTDEFS) $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
		sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
			-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
		rm -f $(@:%.o=%.d)

test_neblio: $(TESTOBJS) $(filter-out obj/init.o,$(OBJS:obj/%=obj/%))
	$(CXX) $(xCXXFLAGS) -o $@ $(LIBPATHS) $^ -Wl,-B$(LMODE) -lboost_unit_test_framework $(xLDFLAGS) $(LIBS)

clean:
	-rm -f test_neblio
	-rm -f nebliod
	-rm -f obj/*.o
	-rm -f obj-test/*.o
	-rm -f obj/zerocoin/*.o
	-rm -f obj/ntp1/*.o
	-rm -f obj/json/*.o
	-rm -f obj/*.P
	-rm -f obj-test/*.P
	-rm -f obj/zerocoin/*.P
	-rm -f obj/ntp1/*.P
	-rm -f obj/json/*.P
	-rm -f obj/build.h
	-rm -rf obj
	-rm -rf obj-test
	-rm -rf restbed/build

FORCE:
